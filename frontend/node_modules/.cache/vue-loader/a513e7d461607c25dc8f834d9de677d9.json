{"remainingRequest":"/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/akbranam/iu/geogateway-django-app/frontend/src/components/LandingPage.vue?vue&type=template&id=54f74f74&scoped=true&","dependencies":[{"path":"/Users/akbranam/iu/geogateway-django-app/frontend/src/components/LandingPage.vue","mtime":1636521189641},{"path":"/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1632718159777},{"path":"/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1632718165371},{"path":"/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1632718159777},{"path":"/Users/akbranam/iu/geogateway-django-app/frontend/node_modules/vue-loader/lib/index.js","mtime":1632718165371}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}